service: one-backend

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  timeout: 30
  memorySize: 512
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    STAGE: ${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET, 'your-secret-key-change-in-production'}
    DYNAMODB_TABLE_PREFIX: ${self:service}-${self:provider.stage}
    BUCKET_NAME: ${self:service}-${self:provider.stage}-files
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_PREFIX}-*
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_PREFIX}-*/index/*
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
        - s3:PutObjectAcl
      Resource:
        - arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true
  serverless-offline:
    httpPort: 3000
    websocketPort: 3001
    lambdaPort: 3002

functions:
  # Authentication endpoints
  auth:
    handler: src/handlers/auth.handler
    events:
      - http:
          path: /auth/{action}
          method: ANY
          cors: true

  # Generic CRUD operations
  crud:
    handler: src/handlers/crud.handler
    events:
      - http:
          path: /api/{appId}/{resource}
          method: ANY
          cors: true
      - http:
          path: /api/{appId}/{resource}/{id}
          method: ANY
          cors: true

  # File operations
  files:
    handler: src/handlers/files.handler
    events:
      - http:
          path: /files/{appId}/{action}
          method: ANY
          cors: true

  # WebSocket connections
  websocket:
    handler: src/handlers/websocket.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default

  # Configuration management
  config:
    handler: src/handlers/config.handler
    events:
      - http:
          path: /config/{appId}
          method: ANY
          cors: true

resources:
  Resources:
    # DynamoDB Tables
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-users
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: appId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: AppIdIndex
            KeySchema:
              - AttributeName: appId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
        BillingMode: PAY_PER_REQUEST

    DataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-data
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: appId
            AttributeType: S
          - AttributeName: resourceType
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: AppResourceIndex
            KeySchema:
              - AttributeName: appId
                KeyType: HASH
              - AttributeName: resourceType
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
          - IndexName: UserDataIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
        BillingMode: PAY_PER_REQUEST

    ConfigTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-config
        AttributeDefinitions:
          - AttributeName: appId
            AttributeType: S
        KeySchema:
          - AttributeName: appId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    AuditTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-audit
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: appId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: AppTimestampIndex
            KeySchema:
              - AttributeName: appId
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
        BillingMode: PAY_PER_REQUEST

    # S3 Bucket for file storage
    FilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - "*"
